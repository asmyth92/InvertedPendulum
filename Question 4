import sympy as sym
import numpy as np
# LINEARISATION!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# Define all involved symbolic variables
# constants
M, m, g, ell = sym.symbols('M, m, g, ell', real=True, positive=True)
# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')
# Define φ
phi = 4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
# Determine the (partial) derivatives of φ, wrt to F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)
F0 = 0
x30 = 0
x40 = 0
phi_deriv_F_at_equlibrium = phi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equlibrium = phi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equlibrium = phi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])

# x2' = aF - bx3
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = 3 / ell / (4*M+m)
d = 3 * (M + m) * g / ell / (4*M+m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81
a_value = float(a.subs([(M, M_value), (m, m_value)]))
b_value = float(b.subs([(M, M_value), (m, m_value), (g, g_value)]))
c_value = float(c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))
d_value = float(d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))




import control as ctrl
import matplotlib.pyplot as plt
G_theta = ctrl.TransferFunction([-c_value], [1, 0, -d_value])
G_x = ctrl.TransferFunction([a_value, 0, -a_value*d_value + b_value*c_value], [1, 0, -d_value, 0, 0])


n_points = 500
t_final = 0.2
t_span = np.linspace(0, t_final, n_points)
input_signal = np.sin(100*t_span**2)
t_out, y_out, x_out  = ctrl.forced_response(G_theta, t_span, input_signal)
t_out1, y_out1, x_out1  = ctrl.forced_response(G_x, t_span, input_signal)
plt.plot(t_out, y_out)
plt.plot(t_out1, y_out1)
plt.show()
