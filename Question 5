#Q5
import sympy as sym
import numpy as np
# LINEARISATION!
# φ(F, x3, x4) ~ φ(F0, x30, x40) + (dφ/dF)(F0, x30, x40) * (F - F0)
#                                + (dφ/dx3)(F0, x30, x40) * (x3 - x30)
#                                + (dφ/dx4)(F0, x30, x40) * (x4 - x40)
# Define all involved symbolic variables
# constants
M, m, g, ell = sym.symbols('M, m, g, ell', real=True, positive=True)
# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')
# Define φ
phi = 4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2
# Determine the (partial) derivatives of φ, wrt to F, x3, x4
phi_deriv_F = phi.diff(F)
phi_deriv_x3 = phi.diff(x3)
phi_deriv_x4 = phi.diff(x4)
F0 = 0
x30 = 0
x40 = 0
phi_deriv_F_at_equlibrium = phi_deriv_F.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x3_at_equlibrium = phi_deriv_x3.subs([(F, F0), (x3, x30), (x4, x40)])
phi_deriv_x4_at_equlibrium = phi_deriv_x4.subs([(F, F0), (x3, x30), (x4, x40)])

# x2' = aF - bx3
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = 3 / ell / (4*M+m)
d = 3 * (M + m) * g / ell / (4*M+m)
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81
a_value = float(a.subs([(M, M_value), (m, m_value)]))
b_value = float(b.subs([(M, M_value), (m, m_value), (g, g_value)]))
c_value = float(c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))
d_value = float(d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))

# ------- ONLY NUMERICAL VALUES (nothing symbolic)
import control as ctrl
import matplotlib.pyplot as plt
transfer_function_F2x3 = ctrl.TransferFunction([-c_value], [1, 0, -d_value])


def pid(Kp, Ki, Kd):
    Gc = ctrl.TransferFunction([Kp], [1])
    Gc += ctrl.TransferFunction([Kd, 0], [1])
    Gc += ctrl.TransferFunction([Ki], [1, 0])
    return Gc


transfer_function_pid = -pid(Kp=100, Ki=1, Kd=10)

overall_tf = ctrl.feedback(transfer_function_F2x3, transfer_function_pid)
t_final = 1
num_points = 500
t_imp, x3_imp = ctrl.impulse_response(overall_tf, T=np.linspace(0, t_final, num_points))
x3_imp_degrees= x3_imp*180/np.pi
import matplotlib.pyplot as plt
plt.plot(t_imp, x3_imp_degrees)
plt.show()
